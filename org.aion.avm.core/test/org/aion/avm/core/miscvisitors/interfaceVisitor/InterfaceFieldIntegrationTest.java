package org.aion.avm.core.miscvisitors.interfaceVisitor;

import org.aion.avm.core.*;
import org.aion.avm.core.blockchainruntime.EmptyCapabilities;
import org.aion.avm.core.dappreading.JarBuilder;
import org.aion.avm.core.miscvisitors.interfaceVisitor.interfaces.*;
import org.aion.avm.core.util.Helpers;
import org.aion.avm.userlib.CodeAndArguments;
import org.aion.avm.userlib.abi.ABIDecoder;
import org.aion.avm.userlib.abi.ABIEncoder;
import org.aion.avm.userlib.abi.ABIException;
import org.aion.avm.userlib.abi.ABIStreamingEncoder;
import org.aion.kernel.TestingBlock;
import org.aion.kernel.TestingState;
import org.aion.types.AionAddress;
import org.aion.types.Transaction;
import org.aion.types.TransactionResult;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import java.math.BigInteger;

import static org.junit.Assert.assertTrue;

public class InterfaceFieldIntegrationTest {
    private static AionAddress deployer = TestingState.PREMINED_ADDRESS;
    private static AvmImpl avm;
    private static TestingState kernel;

    @BeforeClass
    public static void setupClass() {
        TestingBlock block = new TestingBlock(new byte[32], 1, Helpers.randomAddress(), System.currentTimeMillis(), new byte[0]);
        kernel = new TestingState(block);
        avm = CommonAvmFactory.buildAvmInstanceForConfiguration(new EmptyCapabilities(), new AvmConfiguration());
    }

    @AfterClass
    public static void tearDown() {
        avm.shutdown();
    }

    @Test
    public void FIELDSClassDefinedFail() {
        byte[] jar = JarBuilder.buildJarForMainAndClasses(FieldsClassDefinedInterfaceFail.class, FIELDSInterfaceFail.class, ABIEncoder.class, ABIDecoder.class, ABIException.class);
        byte[] txData = new CodeAndArguments(jar, new byte[0]).encodeToBytes();
        AionAddress dappAddress = deploy(deployer, kernel, txData);

        // values below are retrieved from the old version of the AVM (with InterfaceFieldMappingVisitor) after deployment
        String transformedCode = "";
        String objectGraph = "";

        kernel.setTransformedCode(dappAddress, Helpers.hexStringToBytes(transformedCode));
        kernel.putObjectGraph(dappAddress, Helpers.hexStringToBytes(objectGraph));

        TransactionResult result = callDapp(kernel, deployer, dappAddress, "getInterfaceString",
                ExecutionType.ASSUME_MAINCHAIN, kernel.getBlockNumber() - 1);
        Assert.assertTrue(result.transactionStatus.isSuccess());
        Assert.assertEquals("outer", new ABIDecoder(result.copyOfTransactionOutput().orElseThrow()).decodeOneString());

        kernel.generateBlock();
        // call to inner FIELDS class will fail
        result = callDapp(kernel, deployer, dappAddress, "getInnerClassString",
                ExecutionType.ASSUME_MAINCHAIN, kernel.getBlockNumber() - 1);
        Assert.assertTrue(result.transactionStatus.isFailed());

        //re-transform the code
        kernel.setTransformedCode(dappAddress, null);
        kernel.generateBlock();

        // all calls to contract will fail
        result = callDapp(kernel, deployer, dappAddress, "getInterfaceString",
                ExecutionType.ASSUME_MAINCHAIN, kernel.getBlockNumber() - 1);
        Assert.assertTrue(result.transactionStatus.isFailed());

        kernel.generateBlock();
        result = callDapp(kernel, deployer, dappAddress, "getInnerClassString",
                ExecutionType.ASSUME_MAINCHAIN, kernel.getBlockNumber() - 1);
        Assert.assertTrue(result.transactionStatus.isFailed());
    }

    @Test
    public void FIELDSNotDefinedInInterfaceSuccess() {
        byte[] jar = JarBuilder.buildJarForMainAndClasses(FieldsNotDefinedSuccess.class, NoFIELDSInterface.class, SampleObj.class, ABIEncoder.class, ABIException.class);
        byte[] txData = new CodeAndArguments(jar, new byte[0]).encodeToBytes();
        AionAddress dappAddress = deploy(deployer, kernel, txData);

        String objectGraphHex = "000000090300000000030000000103000000020300000003030000000400000001000000040000000200000003000000ff0000000000000001106a6176612e6c616e672e537472696e6700000001000000204164647265737320776173206f6620756e6578706563746564206c656e677468106a6176612e6c616e672e537472696e6700000002000000204172726179206c656e677468206d7573742066697420696e2032206279746573106a6176612e6c616e672e537472696e67000000030000002e426967496e74656765722076616c7565206578636565647320746865206c696d6974206f66203332206279746573396f72672e61696f6e2e61766d2e636f72652e6d69736376697369746f72732e696e7465726661636556697369746f722e53616d706c654f626a00000004000003e8106a6176612e6c616e672e537472696e67000000080000001553616d706c654f626a7b636f756e743d313030307d";

        kernel.putObjectGraph(dappAddress, Helpers.hexStringToBytes(objectGraphHex));
        kernel.generateBlock();

        //re-transform the code
        kernel.setTransformedCode(dappAddress, null);

        TransactionResult result = callDapp(kernel, deployer, dappAddress, "",
                ExecutionType.ASSUME_MAINCHAIN, kernel.getBlockNumber() - 1);
        Assert.assertTrue(result.transactionStatus.isSuccess());
        Assert.assertEquals(31, new ABIDecoder(result.copyOfTransactionOutput().orElseThrow()).decodeOneInteger());
    }

    @Test
    public void FIELDSInInnerInterface() {
        byte[] jar = JarBuilder.buildJarForMainAndClasses(ClassWithNestedInterfaces.class, LevelOneInterface.class, ABIEncoder.class, ABIException.class);
        byte[] txData = new CodeAndArguments(jar, new byte[0]).encodeToBytes();
        AionAddress dappAddress = deploy(deployer, kernel, txData);

        String objectGraphHex = "00000004030000000003000000010300000002000000ff0000000000000001106a6176612e6c616e672e537472696e6700000001000000204164647265737320776173206f6620756e6578706563746564206c656e677468106a6176612e6c616e672e537472696e6700000002000000204172726179206c656e677468206d7573742066697420696e2032206279746573106a6176612e6c616e672e537472696e67000000030000002e426967496e74656765722076616c7565206578636565647320746865206c696d6974206f66203332206279746573";
        kernel.generateBlock();

        kernel.putObjectGraph(dappAddress, Helpers.hexStringToBytes(objectGraphHex));

        //re-transform the code
        kernel.setTransformedCode(dappAddress, null);

        TransactionResult result = callDapp(kernel, deployer, dappAddress, "",
                ExecutionType.ASSUME_MAINCHAIN, kernel.getBlockNumber() - 1);
        Assert.assertTrue(result.transactionStatus.isFailed());
    }

    @Test
    public void FIELDSDefinedInInterfaceSuccess() {
        byte[] jar = JarBuilder.buildJarForMainAndClasses(AcceptFieldsNewAVM.class, FIELDSInterfaceSuccess.class, ABIEncoder.class, ABIDecoder.class, ABIException.class);
        byte[] txData = new CodeAndArguments(jar, new byte[0]).encodeToBytes();
        AionAddress dappAddress = deploy(deployer, kernel, txData);

        TransactionResult result = callDapp(kernel, deployer, dappAddress, "",
                ExecutionType.ASSUME_MAINCHAIN, kernel.getBlockNumber() - 1);
        Assert.assertTrue(result.transactionStatus.isSuccess());
        Assert.assertEquals(115, new ABIDecoder(result.copyOfTransactionOutput().orElseThrow()).decodeOneInteger());
    }

    @Test
    public void FIELDSAsInnerInterfaceName() {
        byte[] jar = JarBuilder.buildJarForMainAndClasses(ClassWithFIELDSAsInterfaceName.class, InnerFIELDSInterface.class, ABIEncoder.class, ABIException.class, InnerFIELDSImplementation.class);
        byte[] txData = new CodeAndArguments(jar, new byte[0]).encodeToBytes();
        AionAddress dappAddress = deploy(deployer, kernel, txData);

        byte[] objectGraph = Helpers.hexStringToBytes("0000000503000000000300000001030000000200000064000000cc0300000003000000ff0000000000000001106a6176612e6c616e672e537472696e6700000001000000204164647265737320776173206f6620756e6578706563746564206c656e677468106a6176612e6c616e672e537472696e6700000002000000204172726179206c656e677468206d7573742066697420696e2032206279746573106a6176612e6c616e672e537472696e67000000030000002e426967496e74656765722076616c7565206578636565647320746865206c696d6974206f66203332206279746573106a6176612e6c616e672e4f626a65637400000004");
        kernel.putObjectGraph(dappAddress, objectGraph);
        //re-transform the code
        kernel.setTransformedCode(dappAddress, null);

        TransactionResult result = callDapp(kernel, deployer, dappAddress, "",
                ExecutionType.ASSUME_MAINCHAIN, kernel.getBlockNumber() - 1);
        // number of processed classes will be different
        Assert.assertTrue(result.transactionStatus.isFailed());
    }

    @Test
    public void FIELDSAsInterfaceName() {
        byte[] jar = JarBuilder.buildJarForMainAndClasses(ClassWithFieldsInterface.class, ABIEncoder.class, ABIException.class);
        byte[] txData = new CodeAndArguments(jar, new byte[0]).encodeToBytes();
        AionAddress dappAddress = deploy(deployer, kernel, txData);

        byte[] objectGraph = Helpers.hexStringToBytes("00000007030000000003000000010300000002030000000303000000030300000004030000000500000006000000ff0000000000000001106a6176612e6c616e672e537472696e6700000001000000204164647265737320776173206f6620756e6578706563746564206c656e677468106a6176612e6c616e672e537472696e6700000002000000204172726179206c656e677468206d7573742066697420696e2032206279746573106a6176612e6c616e672e537472696e67000000030000002e426967496e74656765722076616c7565206578636565647320746865206c696d6974206f66203332206279746573106a6176612e6c616e672e537472696e670000000400000003616263106a6176612e6c616e672e4f626a65637400000005106a6176612e6c616e672e4f626a65637400000006");
        kernel.putObjectGraph(dappAddress, objectGraph);
        //re-transform the code
        kernel.setTransformedCode(dappAddress, null);

        TransactionResult result = callDapp(kernel, deployer, dappAddress, "",
                ExecutionType.ASSUME_MAINCHAIN, kernel.getBlockNumber() - 1);
        // number of processed classes will be different
        Assert.assertTrue(result.transactionStatus.isSuccess());
        Assert.assertEquals(14, new ABIDecoder(result.copyOfTransactionOutput().orElseThrow()).decodeOneInteger());
    }

    @Test
    public void FIELDSAsInterfaceNameAVM2() {
        byte[] jar = JarBuilder.buildJarForMainAndClasses(ClassWithFieldsInterface.class, ABIEncoder.class, ABIException.class);
        byte[] txData = new CodeAndArguments(jar, new byte[0]).encodeToBytes();
        AionAddress dappAddress = deploy(deployer, kernel, txData);

        TransactionResult result = callDapp(kernel, deployer, dappAddress, "",
                ExecutionType.ASSUME_MAINCHAIN, kernel.getBlockNumber() - 1);
        // number of processed classes will be different
        Assert.assertTrue(result.transactionStatus.isSuccess());
        Assert.assertEquals(14, new ABIDecoder(result.copyOfTransactionOutput().orElseThrow()).decodeOneInteger());
    }

    @Test
    public void FIELDSAsInnerInterfaceNameAVM2() {
        byte[] jar = JarBuilder.buildJarForMainAndClasses(ClassWithFIELDSAsInterfaceName.class, InnerFIELDSInterface.class, ABIEncoder.class, ABIException.class, InnerFIELDSImplementation.class);
        byte[] txData = new CodeAndArguments(jar, new byte[0]).encodeToBytes();
        AionAddress dappAddress = deploy(deployer, kernel, txData);

        TransactionResult result = callDapp(kernel, deployer, dappAddress, "",
                ExecutionType.ASSUME_MAINCHAIN, kernel.getBlockNumber() - 1);
        Assert.assertTrue(result.transactionStatus.isSuccess());
        Assert.assertEquals(309, new ABIDecoder(result.copyOfTransactionOutput().orElseThrow()).decodeOneInteger());
    }

    private static TransactionResult callDapp(TestingState kernel, AionAddress sender, AionAddress dappAddress,
                                              String methodName, ExecutionType executionType, long commonMainchainBlockNumber, Object... args) {
        ABIStreamingEncoder encoder = new ABIStreamingEncoder().encodeOneString(methodName);
        for (Object arg : args) {
            encoder.encodeOneByteArray((byte[]) arg);
        }
        byte[] data = encoder.toBytes();
        Transaction tx = AvmTransactionUtil.call(sender, dappAddress, kernel.getNonce(sender), BigInteger.ZERO, data, 2_000_00, 1);
        return avm.run(kernel, new Transaction[]{tx}, executionType, commonMainchainBlockNumber)[0].getResult();
    }

    private static AionAddress deploy(AionAddress deployer, TestingState kernel, byte[] txData) {
        Transaction tx1 = AvmTransactionUtil.create(deployer, kernel.getNonce(deployer), BigInteger.ZERO, txData, 5_000_000, 1);
        TransactionResult result = avm.run(kernel, new Transaction[]{tx1}, ExecutionType.ASSUME_MAINCHAIN, kernel.getBlockNumber() - 1)[0].getResult();
        assertTrue(result.transactionStatus.isSuccess());
        return new AionAddress(result.copyOfTransactionOutput().orElseThrow());
    }
}

